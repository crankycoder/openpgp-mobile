// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PublicKeyMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsPublicKeyMetadata(buf []byte, offset flatbuffers.UOffsetT) *PublicKeyMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PublicKeyMetadata{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPublicKeyMetadata(buf []byte, offset flatbuffers.UOffsetT) *PublicKeyMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PublicKeyMetadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PublicKeyMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PublicKeyMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PublicKeyMetadata) KeyId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) KeyIdShort() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) CreationTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) Fingerprint() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) KeyIdNumeric() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) IsSubKey() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PublicKeyMetadata) MutateIsSubKey(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func PublicKeyMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func PublicKeyMetadataAddKeyId(builder *flatbuffers.Builder, keyId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(keyId), 0)
}
func PublicKeyMetadataAddKeyIdShort(builder *flatbuffers.Builder, keyIdShort flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(keyIdShort), 0)
}
func PublicKeyMetadataAddCreationTime(builder *flatbuffers.Builder, creationTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(creationTime), 0)
}
func PublicKeyMetadataAddFingerprint(builder *flatbuffers.Builder, fingerprint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(fingerprint), 0)
}
func PublicKeyMetadataAddKeyIdNumeric(builder *flatbuffers.Builder, keyIdNumeric flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(keyIdNumeric), 0)
}
func PublicKeyMetadataAddIsSubKey(builder *flatbuffers.Builder, isSubKey bool) {
	builder.PrependBoolSlot(5, isSubKey, false)
}
func PublicKeyMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
